// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/22/2020 19:00:18"
                                                                                
// Verilog Test Bench template for design : exp4_2
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 10 ns/ 1 ps
module exp4_2_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg clr;
reg en;
reg in_d;
// wires                                               
wire out_d1;
wire out_d2;                       
exp4_2 i1 (  
	.clk(clk),
	.clr(clr),
	.en(en),
	.in_d(in_d),
	.out_d1(out_d1),
	.out_d2(out_d2)
);
initial                                                
begin                                                  
clk = 0; in_d = 1; en =1;clr=0; #7;
			in_d = 1;clr=1; #7;
			in_d = 1;clr=0; #7;
			in_d = 1;clr=1; #7;
en = 1; #7;
			 in_d = 1;clr=1; #7;
			 in_d = 1;clr=0; #7;
			 in_d = 1;clr=0; #7;
			 in_d = 1;clr=1; #7;
en = 1; #7;
			 in_d = 0;clr=0; #7;
			 in_d = 1;clr=1; #7;
			 in_d = 0;clr=0; #7;
			 in_d = 1;clr=0; #7;
en = 0; #7;
			 in_d = 0;clr=0; #7;
			 in_d = 1;clr=1; #7;
			 in_d = 0;clr=0; #7;
			 in_d = 1;clr=0; #7;			 
$stop;
end                                                 
always                                                           
begin                                                  
 #5 clk = ~clk;                                                 
end                                                    
endmodule

